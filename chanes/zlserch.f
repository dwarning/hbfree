c
c Copyright (c) 1996-2004 by Gennady Serdyuk.  All rights reserved.
c gserdyuk@mail.ru
c
c Released under GPL v 2.0
c




      SUBROUTINE LSERCH(IRANG2,N,X,FNOR,G,Y,SX,SF,IRETCD,MAXTKN,XN,FN,
     +                FNOR1,LAMBDA,FLAG,FLGFFT)
C
C  LINE SEARCH.   MODIFIED GOLDSTEIN ALGORITHM - ARMIJO
C
C$LARGE:Y
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION  X(1),F(1),G(1),Y(1),SX(1),SF(1),XN(1),FN(1)
      INTEGER           IRETCD
      LOGICAL           MAXTKN
      COMMON/NEWTON/    EPSSOL,EPSDU,EPSMIN,MAXDU,LIMIT
      DOUBLE PRECISION              MAXDU,EPSSOL,EPSDU,EPSMIN
      COMMON/PRINT /    KPRLEN,KPRSRT,KPRNKR,KPRLIN,KPRSOL,
     +     KPRVAR,KPRGRF,KPRQUP
      DOUBLE PRECISION              NEWTLN,MINLBD,LAMBDA,LTEMP,LPREV
C   THIS IS FOR NEF
      INTEGER           FLGFFT
      LOGICAL           FLAG

C INITIALIZATION OF THE ALGORITHM
      MAXTKN=.FALSE.
      IRETCD=2
      ALPHA=1.D-4

C  CALCULATION OF THE L-2 NORM OF VECTOR DU
      NEWTLN=0.D0
      DO 10 I=1,N
   10 NEWTLN=NEWTLN+(Y(I)*SX((I+1)/2))**2
      NEWTLN=DSQRT(NEWTLN)
      IF(NEWTLN.LE.MAXDU) GO TO 20

C NEWTON STEP IS GREATER THAN MAXDU
      REL=MAXDU/NEWTLN
      DO 30 I=1,N
   30 Y(I)=REL*Y(I)
      NEWTLN=MAXDU
   20 CONTINUE

C  CALCULATION OF DECREASE RATE
      SLOPE=0.D0
      DO 40 I=1,N
   40 SLOPE=SLOPE-G(I)*Y(I)

C  RELATIVE STEP LENGTH
      RELLEN=0.D0
      DO 50 I=1,N
      SINV=1/SX((I+1)/2)
   50 RELLEN=DMAX1(RELLEN,DABS(Y(I))/DMAX1(DABS(X(I)),SINV))

C  MINIMALLY ALLOWABLE STEP LENGTH
      MINLBD=EPSDU/RELLEN
C INITIALIZATION LAMBDA
      LAMBDA=1.0D0

C_ COMPUTE LAMBDA_____________________________________________________
 1000 CONTINUE
      DO 65 I=1,N
   65 XN(I)=X(I)-LAMBDA*Y(I)

      CALL NEF(IRANG2,XN,FN,SF,FNOR1,FLAG,FLGFFT)
C  COMPUTATION OF L-2 NORM OF F+ IS DONE IN NEF
C  CHECK: FT <= FC + ALPHA * LAMBDA * SLOPE
      IF((FNOR1-FNOR).GT.(ALPHA*LAMBDA*SLOPE))GOTO 80
C  THERE IS A GOOD POINT
      IRETCD=0.D0
C MAXTKN=?
      IF(LAMBDA.EQ.1.0D0.AND.NEWTLN.GT.0.99D0*MAXDU) MAXTKN=.TRUE.
C_RETURN______________________________________________________________
      RETURN

   80 IF(LAMBDA.GE.MINLBD) GO TO 90
C  GOOD POINT WAS NOT FOUND
      IRETCD=1.D0
      RETURN


   90 CONTINUE
C  MESSAGE ABOUT THE START OF A SINGLE SEARCH
C   (AT THE FIRST STEP, WHEN LAMBDA=1)
      IF(KPRSOL.GE.2.AND.LAMBDA.EQ.1.D0)WRITE(6, 501)
      IF(                LAMBDA.EQ.1.D0)PRINT    501

C  DECREASE LAMBDA
      IF(LAMBDA.LT.1) GO TO 100

C  FIRST FRACTION. QUADRATIC INTERPOLATION
      LTEMP=-SLOPE/(2*(FNOR1-FNOR-SLOPE))
      GO TO 110

C  CUBIC INTERPOLATION
  100 CONTINUE
      DIV=1/(LAMBDA-LPREV)
      V1=FNOR1-FNOR-LAMBDA*SLOPE
      V2=FPREV1-FNOR-LPREV*SLOPE
      A=DIV*(V1/(LAMBDA**2)-V2/(LPREV**2))
      B=DIV*(-V1*LPREV/(LAMBDA**2)+V2*LAMBDA/(LPREV**2))
C     DISC=B*B-3.*A*SLOPE
C  IF A=0 - CUBIC INTERPOLATION DEGENERATES INTO QUADRATIC.
      IF(A.EQ.0.D0) LTEMP=-SLOPE/(2.D0*B)
C  DEGENERATE INTERPOLATION
      IF(A.NE.0.D0) LTEMP=-B/(3.D0*A)+DSQRT((B/(3.D0*A))**2-SLOPE/(3.D0*
     +A))
C  CHECK: LTEMP > 0.5 * LAMBDA
      IF(LTEMP.GT.LAMBDA/2)LTEMP=LAMBDA/2.D0
  110 CONTINUE

C  UPDATE: LTEMP CALCULATED.
      LPREV=LAMBDA
      FPREV1=FNOR1

C  CHECK: LTEMP <= 0.1 * LAMBDA
      IF(LTEMP.LE.0.1D0*LAMBDA) LTEMP=0.1D0*LAMBDA
      LAMBDA=LTEMP

C  MESSAGE ABOUT THE START OF THE SEARCH
      IF(KPRSOL.GE.2) WRITE(6, 502) FNOR1,LAMBDA
                      PRINT    502, FNOR1,LAMBDA
C  DECREASE LAMBDA OF THE CURRENT STEP
      IF(IRETCD.LT.2) RETURN
      GO TO 1000
C     DEBUG SUBTRACE,INIT(NEWTLN,REL,MINLBD,RELLEN,FNOR1,FNOR,SLOPE,
C    *              DISC, LTEMP,LAMBDA,LPREV,DIV,A,B)
  501 FORMAT(15X,'  ONE-DIM SEARCH  : ')
  502 FORMAT(15X,'   FNOR=',E13.6,',  LAMBDA=',E13.6)

      END

