c
c Copyright (c) 1996-2004 by Gennady Serdyuk.  All rights reserved.
c gserdyuk@mail.ru
c
c Released under GPL v 2.0
c




      SUBROUTINE SOLVE (U)
C  DRIVER FOR THE SOLUTION OF NONLINEAR EQUATIONS SYSTEMS
C          BY THE NEWTON METHOD.
C
C  Ref.:     Dennis J., M.L., Schnabel P.
C       Numerical Methods for Unconstrained Minimization
C       and Solution of Nonlinear Equations: Per. and Engl.
C       M.:Mir, 1988.
C
C         PARAMETERS AND CHANGES:
C  PLEASE UPDATE!
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      EQUIVALENCE     (K3,KOL(3)),(KUR,K0,KO)
C      COMMON/NAPR/    U
      DOUBLE PRECISION U(1)

C$LARGE: F,DFDX
C      COMMON/BLK3/    F,DFDX

      COMMON/TER/     ITERMC

      DOUBLE PRECISION F(2*K3*KN), Y(2*K3*KN), GR(2*K3*KN)
      DOUBLE PRECISION UN(2*K3*KN), FN(2*K3*KN)
      DOUBLE PRECISION DFDX(2*K3*KN,2*K3*KN+1)
C     IRANG - RANGE OF THE PROBLEM SIZE.
      INTEGER         IRANG
      INTEGER         INDEX(2*K3*KN)
C SF and SX are hafl size - "scalers"
      DOUBLE PRECISION  SF(K3*KN),SX(K3*KN)


C  THESE 3 LINES - FOR LINEQ1
      INTEGER            NER
      DOUBLE COMPLEX    DET
      DOUBLE PRECISION  ARGD

      COMMON/KOLNAL/  KOL,NAL
      INTEGER         KOL(4)
      LOGICAL         NAL(4)
      COMMON/BLK2/    KNC,KNR,KN,KNR1,KN1
      COMMON/SERV/    EPSIW,LIMERR,KITU
      COMMON/MODGLB/  MGLOB,IAPR
      COMMON/NEWTON/  EPSSOL,EPSDU,EPSMIN,MAXDU,LIMIT
      DOUBLE PRECISION            EPSSOL,EPSDU,EPSMIN,MAXDU
      COMMON/TYPVAL/  TYPI,TYPU
      DOUBLE PRECISION            TYPI,TYPU
      COMMON/PRINT /  KPRLEN,KPRSRT,KPRNKR,KPRLIN,KPRSOL,
     + KPRVAR,KPRGRF,KPRQUP
      LOGICAL         FLAG

C  P-P CONNECTION WITH IRANG AND PABEH POLYGON IRANG.
      INTEGER         TERMCD,KMAXDU
      INTEGER         FLGFFT
      DOUBLE PRECISION            TS,TLS,FNOR,FNORN
      LOGICAL         MAXTKN

C INITIALIZATION

      IRANG=2*K3*KN

      IRANG2 =IRANG/2
      IRANG1 =IRANG+1
      N=2*KN*K3
      N1=N+1
      ITER=0
      FLGFFT=0
      TS=1.D0
      TLS=1.D0
      TERMCD=0

C this is temporary - should be value of UIN assigned
C      DO I=1, N
C        UIN(I)=0.
C      ENDDO

      IF(KPRSOL.GE.2) WRITE(6, 33) N
   33 FORMAT(2X,'ZNEWSOL (÷èïä) :  N=',I4)
      IF(KPRSOL.GE.2) WRITE(6, 2) (U(I),I=1,N)


C  CALCULATE MACHEPS
      CALL MACHEP(EPSIM)
C  SETUP AND CHECK OF INPUT INFORMATION
      CALL NEINCK(N,EPSIM,IRANG,SF,SX,U,TERMCD)
      IF(TERMCD.GE.0) GOTO 10
      IF(KPRSOL.GT.0) WRITE(6,1010) TERMCD
                      PRINT   1010, TERMCD
      STOP
   10 CONTINUE

C  CALCULATE VECTOR FUNCTION
      CALL NEF(IRANG2,U,FN,SF,FNOR,FLAG,FLGFFT)
C    FLAG - ERROR INDICATION IN THE MODEL FUNCTION

C  CHECK IF SOLUTION ALREADY EXISTS
      CALL STOP0(N,FN,U,SF,SX,TERMCD,KMAXDU)
      IF(TERMCD.EQ.1)RETURN
C  CALCULATE JACOBIAN
      CALL NEJAC(IRANG2,U,DFDX,FLAG,FLGFFT)

C  CALCULATE GRADIENT
C   FOR THE STANDARD NORM OF THE VECTOR ACCORDING TO THE PARAMETER
      CALL GRADIE(IRANG,N,DFDX,FN,SF,GR)
C F <- FN
      DO 20 I=1,N
   20 F(I)=FN(I)
C JACOBIAN NOW ANALYTICAL


C ITERATIONS
 1000 IF(TERMCD.NE.0)GOTO 1100
      ITER=ITER+1
C PRINTING
      IF(KPRSOL.GE.2) WRITE(6, 5) ITER
                      PRINT    5, ITER
      IF(KPRSOL.GE.3) WRITE(6, 2) (U(I),I=1,N)
      IF(KPRSOL.GE.3) WRITE(6, 1) (F(I),I=1,N)

C SOLUTION OF THE AFFINE MODEL
      CALL REGUL(IRANG,DFDX,F,N)
      IF(KPRSOL.GE.3) WRITE(6,4900) N, N1
      IF(KPRSOL.GE.3) PRINT   4900, N, N1
 4900 FORMAT(2X,'ZNEWSOL        : N=',I5,'  N1=',I5)
      IF(KPRSOL.GE.3) WRITE(6, 5000) (DFDX(I,N1),I=1,N)
      IF(KPRSOL.GE.3) PRINT    5000, (DFDX(I,N1),I=1,N)
 5000 FORMAT(2X,'ZNEWSOL (REGUL): DFDX='/(3X,6(E13.6)))
      IF(KPRSOL.GE.3) WRITE(6, 5005) (F(I),I=1,N)
      IF(KPRSOL.GE.3) PRINT    5005, (F(I),I=1,N)
 5005 FORMAT(2X,'                 F   ='/(3X,6(E13.6)))

      DO 40 I=1,N
      DFDX(I,N1)=F(I)
   40 CONTINUE
      IF(KPRSOL.GE.3) WRITE(6, 5100) (DFDX(I,N1),I=1,N)
      IF(KPRSOL.GE.3) PRINT    5100, (DFDX(I,N1),I=1,N)
 5100 FORMAT(2X,'ZNEWSOL (40)    : DFDX='/(3X,6(E13.6)))
C 5100 FORMAT(2X,'ZNEWSOL (40)    : DFDX=',3X,E13.6)
C   40 CONTINUE

      CALL LINEQ1(DFDX,IRANG,N,IRANG1,1,INDEX,NER,DET,ARGD)
C  INTEGER INDEX(IRANG),COMPLEX DET,REAL ARGD,INTEGER NER  õöE
C DECLARATIONS. NER=1 - EVERYTHING IS GOOD, NER=0 - ERROR IN COLUMN ALIGNMENT.
      IF(KPRSOL.GE.3) WRITE(6, 5200) (DFDX(I,N1),I=1,N)
      IF(KPRSOL.GE.3) PRINT    5200, (DFDX(I,N1),I=1,N)
 5200 FORMAT(2X,'ZNEWSOL (LINEQ1): DFDX='/(3X,6(E13.6)))

      DO 50 I=1,N
   50 Y(I)=DFDX(I,N1)
      IF(KPRSOL.GE.3) WRITE(6, 4000) (Y(I),I=1,N)
      IF(KPRSOL.GE.3) PRINT    4000, (Y(I),I=1,N)
 4000 FORMAT(2X,'ZNEWSOL (50)    : Y='/(3X,6(E13.6)))

C  EVALUATION OF THE MINIMUM PARTS OF THE TRANSFER AT THE ZERO FREQUENCY
      CALL OTCHM(Y,K3)
      IF(KPRSOL.GE.3) WRITE(6, 4100) (Y(I),I=1,N)
      IF(KPRSOL.GE.3) PRINT    4100, (Y(I),I=1,N)
 4100 FORMAT(2X,'ZNEWSOL (OTCHM) : Y='/(3X,6(E13.6)))

C   CALCULATION OF THE ANGLE BETWEEN GRADIENT AND PROJECTION. ESTIMATION OF THE MODEL JACOBIAN.
C   L2 NORM OF THE GRADIENT AND PROJECTION
      SLOPE=0.D0
      GRNOR=0.D0
      YNOR=0.D0
      DO 2001 II=1,N
      SLOPE=SLOPE-GR(II)*Y(II)
      GRNOR=GRNOR+GR(II)*GR(II)
 2001 YNOR=YNOR+Y(II)*Y(II)
      YNOR=DSQRT(YNOR)
      GRNOR=DSQRT(GRNOR)
C  COS(GAMMA)
      COSGA=SLOPE/(GRNOR*YNOR)
      IF(KPRSOL.GE.3)  WRITE(6, 3001) SLOPE,GRNOR,YNOR, COSGA
 3001 FORMAT(2X,'ZNEWSOL : SLOPE=',E12.5,' GRNOR=',E12.5,' YNOR=',
     + E12.5/12X,'COSGA=',E21.14)
      IF(COSGA.GT. 1.000000000D0) COSGA= 1.000000000D0
      IF(COSGA.LT.-1.000000000D0) COSGA=-1.000000000D0
      DGAMMA=DACOS(COSGA)
      GA=(DGAMMA/3.14D0)*180.D0
      IF(KPRSOL.GE.2)WRITE(6, 2003) GA
                     PRINT    2003, GA
 2003 FORMAT(' *** IN THIS POINT ANGLE BTWN GRAD. AND CORRECTION=',F8.4)
      ESTIM=-1.D0/COSGA
      IF(KPRSOL.GE.2) WRITE(6, 2004) ESTIM
                      PRINT    2004, ESTIM
 2004 FORMAT(' *** LOWER ESTIM. OF CONDITION NUMBER    =',E14.7)

C  GLOBALIZATION:
C   .1. APPROXIMATION
      IF(IAPR .NE.1) GOTO 55
      CALL SUPRIM(TS,U,Y)
      IF(KPRSOL.GE.3) WRITE(6, 4200) (Y(I),I=1,N)
      IF(KPRSOL.GE.3) PRINT    4200, (Y(I),I=1,N)
 4200 FORMAT(2X,'ZNEWSOL (SUPRIM): Y='/(3X,6(E13.6)))
C
C     APPROXIMATION
      DO 60 I=1,N
   60 UN(I)=U(I)-Y(I)
      CALL NEF(IRANG2,UN,FN,SF,FNORN,FLAG,FLGFFT)
   55 CONTINUE

C .2. NONLINEAR SEARCH.
      IF(MGLOB.EQ.1)CALL LSERCH(IRANG2,N,U,FNOR,GR,Y,SX,SF,IRETCD,MAXTKN
     +,UN,FN,FNORN,            TLS,FLAG,FLGFFT)
      IF(KPRSOL.GE.3) WRITE(6, 4300) (Y(I),I=1,N)
      IF(KPRSOL.GE.3) PRINT    4300, (Y(I),I=1,N)
 4300 FORMAT(2X,'ZNEWSOL (LSERCH): Y='/(3X,6(E13.6)))

C  IF GLOBALIZATION DID NOT OCCUR, THEN IT IS NECESSARY TO CALCULATE UN, FN, FNORN
      IF(.NOT.(MGLOB.NE.1.AND.IAPR.NE.1))GOTO 70
      DO 80 I=1,N
   80 UN(I)=U(I)-Y(I)
      CALL NEF(IRANG2,U,FN,SF,FNORN,FLAG,FLGFFT)
   70 CONTINUE

C  PRINT AGAIN
      IF(KPRSOL.GE.3) WRITE(6, 3) (Y(I),I=1,N)
      IF(KPRSOL.GE.3) PRINT    3, (Y(I),I=1,N)
C  STOP THE ITERATION...
C    JACOBIAN:
      CALL NEJAC(IRANG2,UN,DFDX,FLAG,FLGFFT)
C    GRADIENT:
      CALL GRADIE(IRANG,N,DFDX,FN,SF,GR)
C  CHECKING THE CONDITION OF THE SYSTEM
      CALL STOP(N,U,Y,FN,FNORN,GR,SX,SF,                     IRETCD,ITER
     +,MAXTKN,KMAXDU,TERMCD)
      IF(KPRSOL.GE.2) WRITE(6, 4400) (Y(I),I=1,N)
      IF(KPRSOL.GE.3) PRINT    4400, (Y(I),I=1,N)
 4400 FORMAT(2X,'ZNEWSOL (STOP): Y='/(3X,6(E13.6)))


      IF(KPRSOL.GE.3) WRITE(6, 2) (U(I),I=1,N)


      ITERMC=TERMCD

C  AND PRINT AGAIN
      IF(KPRSOL.GE.3) WRITE(6, 4) FNOR,TS,TLS
    5 FORMAT(2X,'ITERATION ',I4)
    1 FORMAT(2X,'  F= ..'/(3X,6(E12.5)))
    2 FORMAT(2X,'  U= ..'/(3X,6(E12.5)))
    3 FORMAT(2X,' DU= ..'/(3X,6(E12.5)))
    4 FORMAT(2X,'FNOR=',E12.5,2X,'TS=',E12.5,2X,'TLS=',E12.5)


C  U <- UN , F <- FN , FNOR <- FNORN
      DO 110 I=1,N
      U(I)=UN(I)
  110 F(I)=FN(I)
      FNOR=FNORN
      IF(KPRSOL.GE.2) WRITE(6, 2) (U(I),I=1,N)

      GOTO 1000
C___E_N_D__________________________________________________________
1100  CONTINUE
      IF(KPRSOL.GE.2) WRITE(6, 1200)
1200  FORMAT(2X,'ZNEWSOL (EXIT)  : ')
      IF(KPRSOL.GE.2) WRITE(6, 2) (U(I),I=1,N)


      RETURN
C
C
 1010 FORMAT(2X,'  ##### ZNEWSOL:  A T T E N T I O N ! !    #######'/
     +    2X,'     FATAL ERROR IN INPUT DATA.'/       2X,'            RE
     +TURN CODE =',I2)
      END
