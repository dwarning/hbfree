c
c Copyright (c) 1996-2004 by Gennady Serdyuk.  All rights reserved.
c gserdyuk@mail.ru
c
c Released under GPL v 2.0
c




      SUBROUTINE LUSLV (ALU,NTOT,N,NF,NEND,FLAG)
C**************************************************************
C*          Subroutine for Complex LU Factorization           *
C*   Designed for LU Factorization of part of the matrix ALU. *
C*                                                            *
C*          FORMAL PARAMETERS:                                *
C*    ALU - OUTPUT MATRIX, HAS NORMAL (NON-SINGULAR) FORM FOR *
C*   Y-MATRIX, TYPE: THE OUTPUT IS: L-MATRIX, REPRESENTING A  *
C*   PREVIOUSLY SELECTED MATRIX, WITH L = L'*D, WHERE L' IS A *
C*   UNIT DIAGONAL, Y-MATRIX ALSO HAS A UNIT DIAGONAL, AND THE*
C*   ELEMENT A(NEND+1, NEND+1) BEGINS A DECOMPOSITION MATRIX, *
C*   WHICH CORRESPONDS TO THE GRAPH C WITH EXCLUDED NODES FROM*
C*   1..N.                                                    *
C*   DECOMPOSITION MATRIX MAINTAINS ITS NON-SINGULAR FORM.    *
C*   IN THE DECOMPOSED PART, THE DIAGONAL IS NON-VARIANT.     *
C*   NON-SINGULAR IS CONSIDERED A Y-MATRIX, WHERE DIAGONAL    *
C*   ELEMENTS ARE NON-FULL NODES OF CONDUCTIVITY, ONLY THE    *
C*   CONDUCTIVITY BETWEEN I-M AND ZERO NODES.                 *
C*    COMPLEX ALU(NTOT, NTOT)                                 *
C*      NTOT - FULL DIMENSION OF THE MATRIX ALU (BY THE       *
C*             DIMENSION DECLARED IN THE CALLING PROGRAM)     *
C*      N - DIMENSION OF THE PROCESSED (I.E. FILLED) PART OF ALU *
C*      NF - STARTING ROW, FROM WHICH THE FACTORIZATION SHOULD *
C*           BEGIN                                            *
C*      NEND - ENDING ROW, WHERE FACTORIZATION SHOULD BE ENDED*
C*      FLAG - ERROR FLAG:                                    *
C*        0 - NO ERRORS,                                      *
C*        1 - N, NEND OR NF LESS THAN 1                       *
C*        2 - N, NEND OR NF GREATER THAN NTOT                 *
C*        3 - NF GREATER THAN NEND                            *
C*        4 - NF OR NEND GREATER THAN N                       *
C*                                                            *
C**************************************************************

C$LARGE: ALU
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE COMPLEX ALU(NTOT,NTOT)
      DOUBLE COMPLEX DIAG(100),AKI,DI,SUM,DIFF
      INTEGER FLAG
C  CHECKING THE INPUT DATA
C     DO 4 IV=1,N
C     DO 4 JV=1,N
C     WRITE(6, 3) IV, JV, ALU(IV,JV)
C   3 FORMAT(2X,'LUSLV: ALU(',I3,',',I3,')=',E12.5,2X,E12.5)
C   4 CONTINUE
      FLAG=0
      IF ((NF.GT.N).OR.(NEND.GT.N)) FLAG=5
      IF (NF.GT.NEND) FLAG=4
      IF ((NF.GT.NTOT).OR.(NEND.GT.NTOT).OR.(N.GT.NTOT))FLAG=3
      IF ((NF.LT.1).OR.(NEND.LT.0).OR.(N.LT.1)) FLAG=2
      IF (NTOT.LT.1) FLAG=1
C  EXCLUSION: IF NEND=NF-1, THEN FUTURE ELEMENTS - 0
C  (NORMAL TERMINATION. RECOVERY)  (!) FLAG=4 (!)
      IF(NEND-NF+1.EQ.0) RETURN
      IF(FLAG.NE.0)  WRITE(6, 35)  FLAG
      IF(FLAG.NE.0)RETURN
C  IF N=1, THEN THE FACTORIZATION CAN BE CONSIDERED COMPLETED - THE MATRIX
C  CONTAINS ONE ELEMENT ALU(1,1)
      IF(N.EQ.1) RETURN

C  TRANSFORMATION OF THE ACTIVE PART OF THE Y-MATRIX ALU TO A CANONICAL
C  FORM. DIAGONAL ELEMENTS WILL BE STORED IN A SEPARATE VECTOR OF DOUBLE
C  PRECISION. AFTER THE USE OF THE ELEMENT, THE DIAGONAL VECTOR WILL BE
C  REPLACED IN ALU. UNUSED ONES WILL BE CONVERTED TO CANONICAL FORM.
      DO 5 IROW=NF,N
      SUM=2.D0*ALU(IROW,IROW)
      DO 7 JCOL=NF,N
   7  SUM=SUM-ALU(IROW,JCOL)
      DIAG(IROW)=SUM
   5  CONTINUE
C  FACTORIZATION OF NEND-NF+1 FUTURE ELEMENTS
C  EXCLUSION: IF NEND = N, THEN NEND = NEND - 1
      NE=NEND
      IF(NEND.EQ.N) NE=NEND-1
      DO 10 KPIV=NF,NE
C  ASSIGNMENT OF THE USED ELEMENT DIAG TO A(KPIV, KPIV)
C     WRITE(6,1111) NF,NE,KPIV,DIAG(KPIV)
C1111 FORMAT(2X,'LUSLV: NF=',I5,' NE=',I5,' KPIV=',I5,' DIAG=',2E12.5)
      ALU(KPIV,KPIV)=DIAG(KPIV)
C  NORMALIZATION FOR THE ELEMENTS OF THE NEXT ROW
      DI=1.D0/(DIAG(KPIV)+0.1D-30)
C  IN ALL COLUMNS OF THE ACTIVE SUBMATRIX:
      KPIVP1=KPIV+1
      DO 20 JCOL=KPIVP1,N
C  NORMALIZATION THE ELEMENTS OF THE NEXT ROW
      AKI=ALU(KPIV,JCOL)*DI
      ALU(KPIV,JCOL)=AKI
C  ASSIGN IT TO THE ELEMENT OF THE NEXT COLUMN
C  AND CALCULATE FROM THE CURRENT ELEMENT.
C  AND SO ON FOR ALL ELEMENTS OF THE COLUMN.
      DO 30 IROW=KPIVP1,N
      IF(IROW.NE.JCOL)ALU(IROW,JCOL)=ALU(IROW,JCOL)-AKI*ALU(IROW,KPIV)
      IF(IROW.EQ.JCOL)    DIAG(IROW)=DIAG(IROW)    -AKI*ALU(IROW,KPIV)
   30 CONTINUE
   20 CONTINUE
   10 CONTINUE
C  TRANSFORMATION OF THE ACTIVE SUBMATRIX PART
C  TO A NORMALIZED FORM.
C
C  FOR ALL ROWS OF THE ACTIVE SUBMATRIX:
      NEP1=NE+1
      DO 23 IROW=NEP1,N
      DIFF=DIAG(IROW)
C  FOR ALL ELEMENTS OF THE ROW (INCLUDING THE DIAGONAL ELEMENT)
      DO 25 JCOL=NEP1,N
      IF(IROW.NE.JCOL)DIFF=DIFF+ALU(IROW,JCOL)
   25 CONTINUE
      ALU(IROW,IROW)=DIFF
   23 CONTINUE
      RETURN
   35 FORMAT('    LUSLV:'/'   ERR IN INPUT DATA.FLAG=',I4)
      END
