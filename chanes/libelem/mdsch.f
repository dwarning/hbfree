c
c Copyright (c) 1996-2004 by Gennady Serdyuk.  All rights reserved.
c gserdyuk@mail.ru
c
c Released under GPL v 2.0
c





      SUBROUTINE MDSCH1(IVAR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER*4 KLC,KLV,KNL,IVAR
      COMMON/MDLA/MT(15)

      MT(1)=IVAR
      MT(2)=2
      MT(3)=2
      KLC=    IVAR
      KLV= 1-KLC
      KNL=2
      RETURN
C     DEBUG SUBTRACE
      END


      SUBROUTINE MDSCH2(OM,P1,L1,P2,L2,P3,L3)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/SUBC/Y(15,15),J(15)
      DOUBLE PRECISION P1    ,P2    ,P3    ,ZN
      DOUBLE COMPLEX Y,J
      DIMENSION P1(L1),P2(L2),P3(L3)
C     WRITE(6,111) P3(1), P3(3), L3
C 111 FORMAT(2X,'MDSCH2: P3(1)=',E12.5,' P3(3)=',E12.5,' L3=',I3)
      ZN=P3(1)**2+(P3(3)*OM)**2
      Y(1,1)=DCMPLX(P3(1)/ZN,-OM*P3(3)/ZN+P3(2)*OM)
      Y(1,2)=-DCMPLX(0.0D0,OM*P3(2))
      Y(1,3)=-DCMPLX(P3(1)/ZN,-OM*P3(3)/ZN)
      Y(2,1)=Y(1,2)
      Y(2,2)=DCMPLX(0.0D0,OM*P3(2))
      Y(2,3)=DCMPLX(0.0D0,0.0D0)
      Y(3,1)=Y(1,3)
      Y(3,2)=Y(2,3)
      Y(3,3)=DCMPLX(P3(1)/ZN,-OM*P3(3)/ZN)
      RETURN
C     DEBUG SUBTRACE
      END


      SUBROUTINE MDSCH3(NG,P1,L1,P2,L2,P3,L3,B1,KNC2,NR,*)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION P1,P2,P3
      DIMENSION P1(L1),P2(L2),P3(L3)
      DOUBLE PRECISION FIT,FR,TOK,C0,ALFA,ARGMAX/40.0D0/
      DIMENSION B1(KNC2,NR)
      DOUBLE PRECISION B1
      UN1(U)=TOK*(DEXP(ALFA*U)-1.0D0)
      UN2(U)=C0/DSQRT(1.0D0-U/FIT)
      FIT=P2(1)
      FR=P2(2)
      TOK=P3(4)
      C0=P3(5)
      ALFA=P3(6)
      EPS2=2.0D0*(FIT-FR)
      DO 10 K=1,KNC2,2
      U=B1(K,1)
      IF(U*ALFA.GT.ARGMAX) U=ARGMAX/ALFA
      IF (U.GT.FR) GO TO 5
      B1(K,1)=UN1( U)+UN2( U)*B1(K,2)
      GO TO 10
    5 B1(K,1)=UN1(U)+UN2(FR)*B1(K,2)*(1.0D0+(U-FR)/EPS2)
   10 B1(K+1,1)=0.0D0
      RETURN
C     DEBUG SUBTRACE,INIT(FIT,FR,C0,TOK,ALFA,EPS2)
      END


      SUBROUTINE MDSCH4(NG,P1,L1,P2,L2,P3,L3,B1,KNC2,NR,*)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION P1,P2,P3
      DIMENSION P1(L1),P2(L2),P3(L3)
      DOUBLE PRECISION FIT,FR,TOK,C0,ALFA,ARGMAX/40.0D0/
      DIMENSION  B1(KNC2,NR)
      DOUBLE PRECISION B1
      DUN1(U)=TOK*ALFA*DEXP(ALFA*U)
      UN2(U)=C0/DSQRT(1.0D0-U/FIT)
      UN3(U)=UN2(U)/(2.0D0*(FIT-U))

      FIT=P2(1)
      FR=P2(2)
      TOK=P3(4)
      C0=P3(5)
      ALFA=P3(6)
      FIT2=FIT+FIT
      DO 10 K=1,KNC2,2
      U=B1(K,1)
      IF(U*ALFA.GT.ARGMAX) U=ARGMAX/ALFA
      IF (U.GT.FR) GO TO 3
      B1(K,1)=DUN1( U)+UN3( U)*B1(K,2)
      B1(K,2)= UN2( U)
      GO TO 5
    3 B1(K,1)=DUN1(U)+UN3(FR)*B1(K,2)
      B1(K,2)= UN2(FR)+UN3(FR)*(U-FR)
    5 B1(K+1,1)=0.0D0
      B1(K+1,2)=0.0D0
C     IF(K.NE.KKK)GOTO 10
C     KKK=KKK+10
C     PRINT 111,(K,U,DUDT,B1(K,1),B1(K,2))
C 111 FORMAT('  K=',I4,' U=',E12.5,' DUDT=',E12.5,'B1(K,1)=',E12.5,
C    * ' B1(K,2)=',E12.5)
   10 CONTINUE
      RETURN
C     DEBUG SUBTRACE
      END


      SUBROUTINE MDSCH5(NOI,NOU,EXIST,KOI,KOUV,KOPV,NR1V,NB1V)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER NOI(5,2),NOU(5,2)
      LOGICAL EXIST(5,2)
      INTEGER KOI,KOUV(5),KOPV(5),NR1V(5),NB1V(5)

      NOI(1,1)=3
      NOI(1,2)=2
      NOU(1,1)=3
      NOU(1,2)=2
      EXIST(1,1)=.TRUE.
      EXIST(1,2)=.TRUE.
      KOI=1
      KOUV(1)=1
      KOPV(1)=1
      NR1V(1)=2
      NB1V(1)=2

      RETURN
      END


      SUBROUTINE MDSCH6(NG,P1,L1,P2,L2,P3,L3,VAL,DVAL,KN,NR,T)
C
C
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION P1,P2,P3
      DOUBLE COMPLEX VAL,DVAL
      DIMENSION P1(L1),P2(L2),P3(L3)
      DIMENSION VAL(KN,NR),DVAL(KN,NR)
      DOUBLE PRECISION UOLD,UNEW,USTEP
      DOUBLE PRECISION DELTA,UBOUND,STEPM

      DELTA=0.01D0
      UBOUND=P3(7)
      STEPM=P3(8)

      UOLD=0.0D0
      UNEW=0.0D0
      IF(KN.LT.2)GO TO 15
      DO 10 I=2,KN
      UOLD=UOLD+ZABS(VAL(I,1))
   10 UNEW=UNEW+ZABS(VAL(I,1)+DVAL(I,1))
   15 CONTINUE

      UOLD=UOLD+UOLD+DREAL(VAL(1,1))
      UNEW=UNEW+UNEW+DREAL(VAL(1,1)+DVAL(1,1))
      USTEP=    UNEW-UOLD
C  IT MAY BE NECESSARY TO USE ABS(     )

      IF(UNEW.LE.UBOUND)RETURN
      IF(UOLD.LE.UBOUND)GO TO 20
      IF(USTEP.GT.STEPM)T=STEPM/USTEP
      RETURN
   20 T=(UBOUND+DELTA-UOLD)/USTEP
      RETURN
C     DEBUG SUBTRACE,INIT(USTEP,T)
      END
